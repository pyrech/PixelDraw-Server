<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite24</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>admin = HTML5_am_I_admin()
admin_id = HTML5_get_admin()
last_pressed = false
wait_next = false
time_remaining = 50*room_speed
s = surface_create(320,320)
sc = surface_create(320,320)
g=ds_grid_create(16, 16) // current grid
d=ds_grid_create(16, 16) // diff
var ix,iy
ds_grid_set_region(g, 0, 0, 15 ,15, c_white)
ds_grid_set_region(d, 0, 0, 15 ,15, c_white)
my_step = 0
r=0 // rayon
must_draw = false
must_clear = true
v = c_black


last_yy = 0
yy = 0
last_xx = 0
xx = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if HTML5_get_admin() != admin_id {
  //show_message(HTML5_get_admin()+" !=  "+admin)
  o_ctrl.wait_restart = true;
  room_goto(room_wait)
  exit;
}

if not admin {exit}
my_step +=1
my_step = my_step mod 15

if my_step==0{
  //send picture
  ds_grid_get(g,ix,iy)
  var ix, v,iy,str
  str ="["
  for (ix = 0; ix &lt; 16; ix += 1) { 
    for (iy = 0; iy &lt; 16; iy += 1) {
      v = ds_grid_get(g,iy,ix)
      str += string(v)
      if (ix*iy != 225) {
        str += ",";
      }
    }
  }
  //show_message(str)
  HTML5_send_picture(str+"]")
}


must_draw = false
if not mouse_check_button(mb_any)
or o_btn_colors.pick_color {
  last_pressed = false
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if not admin {exit}
if (wait_next) {wait_next -=1}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if not admin {exit}
if mouse_y &lt; 320
&amp;&amp; not wait_next
&amp;&amp; not o_btn_colors.pick_color {
  ds_grid_set_region(d, 0, 0, 15 ,15, 0)
  must_draw = true
  last_xx = xx
  last_yy = yy
  xx = floor(mouse_x/20)
  yy = floor(mouse_y/20)
  
  if last_pressed {
    var t
    tl= floor(point_distance(last_xx,last_yy,xx,yy))
    for (t=0; t&lt;tl; t+=1){
      ds_grid_set_disk(g,
        floor(lerp(last_xx,xx,t/tl)),
        floor(lerp(last_yy,yy,t/tl)),
        r,o_btn_colors.color)
      ds_grid_set_disk(d,
        floor(lerp(last_xx,xx,t/tl)),
        floor(lerp(last_yy,yy,t/tl)),
        r,o_btn_colors.color)
    }
  }
    ds_grid_set_disk(g,xx,yy,r,v)
    ds_grid_set_disk(d,xx,yy,r,v)
    last_pressed = true
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if admin {
  if must_clear {
    surface_set_target(s)
    draw_set_color(c_white)
    draw_rectangle(0,0,320,480,false)
    surface_reset_target()
    must_clear = false
  }
  
  if must_draw {
    var ix, iy
    surface_set_target(s)
    for (ix = 0; ix &lt; 16; ix += 1) { 
      for (iy = 0; iy &lt; 16; iy += 1) {
        col = ds_grid_get(d,ix,iy)
        if col != 0 {
          draw_set_color(o_btn_colors.color)
          draw_rectangle(ix*20,iy*20,(ix+1)*20,(iy+1)*20,false)
        }
      }
    }
    surface_reset_target()
  }

} else {
  if HTML5_get_the_color_ready(){
    var ix, iy
    surface_set_target(s)
    draw_rectangle(0,0,320,480,false)
    for (ix = 0; ix &lt; 16; ix += 1) { 
      for (iy = 0; iy &lt; 16; iy += 1) {
        col = HTML5_get_the_color(ix+16*iy)
        if col != 0 {
          draw_set_color(col)
          draw_rectangle(ix*20,iy*20,(ix+1)*20,(iy+1)*20,false)
        }
      }
    }
    surface_reset_target()
  }
}

draw_surface(s,0,0)
if admin {
  draw_set_color(c_white)  
  draw_roundrect(45,310,275,330,false)
  draw_set_color(c_black)
  draw_text(room_width/2,320,global.word)
}
time_remaining -=1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
